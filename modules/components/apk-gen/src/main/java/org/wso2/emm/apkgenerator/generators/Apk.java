/*
 * *
 * * Copyright (c) 2014, WSO2 Inc. (http://www.wso2.org) All Rights
 * Reserved.
 * *
 * * Licensed under the Apache License, Version 2.0 (the "License");
 * * you may not use this file except in compliance with the License.
 * * You may obtain a copy of the License at
 * *
 * * http://www.apache.org/licenses/LICENSE-2.0
 * *
 * * Unless required by applicable law or agreed to in writing, software
 * * distributed under the License is distributed on an "AS IS" BASIS,
 * * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * * See the License for the specific language governing permissions and
 * * limitations under the License.
 */
package org.wso2.emm.apkgenerator.generators;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;
import org.apache.maven.shared.invoker.DefaultInvocationRequest;
import org.apache.maven.shared.invoker.DefaultInvoker;
import org.apache.maven.shared.invoker.InvocationRequest;
import org.apache.maven.shared.invoker.MavenInvocationException;
import org.wso2.emm.apkgenerator.util.Constants;
import org.wso2.emm.apkgenerator.util.FileOperator;

/**
 * Using the BKS created and the EMM agent source included, apk file can be
 * generated with this class. Also the final zip output is generated here
 */
public class Apk {

	private static Logger log = Logger.getLogger(Apk.class);

	/**
	 * Carry out the sequence of tasks necessary to generate the APK.
	 * 
	 * @param commonUtilPath
	 *            is the path of Common utility class of Android agent source
	 * @param serverIp
	 *            is the IP of the server, which the certificate will be used
	 * @param password
	 *            of BKS store
	 * @param zipFileName
	 *            is the name of the Zip output file.
	 * @param zipPath
	 *            folder which holds all the temporary files and final zip
	 * @return The output path
	 * @throws CertificateGenerationException
	 */
	public static String compileApk(String commonUtilPath, String serverIp,
			String password, String zipFileName, String zipPath)
			throws CertificateGenerationException {
		changeContent(commonUtilPath, serverIp, password);
		buildApk();
		// file paths of the four output files, that needs to be generated by,
		// combining the directory user passes.
		String apkPath = ApkGenerator.workingDir + Constants.ANDROID_AGENT_APK;
		String wso2carbon = ApkGenerator.workingDir + Constants.WSO2CARBON_JKS;
		String client_truststore = ApkGenerator.workingDir
				+ Constants.CLIENT_TRUST_JKS;
		String wso2mobilemdm = ApkGenerator.workingDir + Constants.WSO2EMM_JKS;

		// Zip the above four files and create a zip file in the output folder
		FileOperator.createZip(zipPath + zipFileName, new String[] { apkPath,
				wso2carbon, client_truststore, wso2mobilemdm });

		return zipPath + zipFileName;
	}

	/**
	 * Some configurations, such as server host name, trust store password has
	 * to be added to the source code of the EMM agent, prior to compiling it.
	 * This function will change the content of the commonUtils file of EMM
	 * Android agent code and inject IP address and password of the server which
	 * should be contacted.
	 * 
	 * @param commonUtilPath
	 *            is the Android agent's CommonUtil class's file path.
	 * @param hostName
	 *            of the server that the agent needs to communicate
	 * @param password
	 *            of the BKS store
	 * @throws FileNotFoundException
	 */
	private static void changeContent(String commonUtilPath, String hostName,
			String password) throws CertificateGenerationException {

		String content = FileOperator.readFile(commonUtilPath);
		int startInd = content.indexOf("String SERVER_IP = \"");
		int lastInd = content.indexOf("\";", startInd);
		String changedContent = content.substring(0, startInd)
				+ "String SERVER_IP = \"" + hostName
				+ content.substring(lastInd);

		startInd = changedContent.indexOf("String TRUSTSTORE_PASSWORD = \"");
		lastInd = changedContent.indexOf("\";", startInd);
		changedContent = changedContent.substring(0, startInd)
				+ "String TRUSTSTORE_PASSWORD = \"" + password
				+ changedContent.substring(lastInd);
		FileOperator.fileWrite(commonUtilPath, changedContent);
	}

	/**
	 * Build the apk using maven. This is where the actual android source
	 * compilation happens
	 * 
	 */
	static void buildApk() throws CertificateGenerationException {
		renameFile();
		try {
			List<String> PUBLISH_GOALS = Arrays.asList("clean", "package");
			InvocationRequest request = new DefaultInvocationRequest();
			// provide POM file to invoker
			request.setPomFile(new File(ApkGenerator.workingDir
					+ Constants.ANDROID_AGENT + File.separator));
			request.setGoals(PUBLISH_GOALS);
			DefaultInvoker invoker = new DefaultInvoker();
			// retrieve Maven home
			invoker.setMavenHome(new File(getMavenHome("MAVEN_HOME")));
			invoker.execute(request);
		} catch (NullPointerException e) {
			log.error(
					"Could not find MAVEN_HOME, please set it globally, so that"
							+ " the user that starts java can access it. "
							+ e.getMessage(), e);
			throw new CertificateGenerationException(
					"Could not find MAVEN_HOME, please set it globally, so that"
							+ " the user that starts java can access it. "
							+ e.getMessage(), e);
		} catch (MavenInvocationException e) {
			log.error("Error while executing maven invoker:" + e.getMessage(),
					e);
			throw new CertificateGenerationException(
					"Error while executing maven invoker:" + e.getMessage(), e);
		}
	}

	/**
	 * To solve the issue of the POM file include with the EMM agent source
	 * getting deleted, it was renamed later changed
	 */
	private static void renameFile() {
		File tempPOMFile = null;
		File finalPOMFile = null;

		// create new File objects
		tempPOMFile = new File(ApkGenerator.workingDir
				+ Constants.ANDROID_AGENT_POM_FAKE);
		finalPOMFile = new File(ApkGenerator.workingDir
				+ Constants.ANDROID_AGENT_POM);

		// rename file
		tempPOMFile.renameTo(finalPOMFile);
	}

	/**
	 * @param environmentVar
	 *            is the environment variable that needs to be fetched
	 * @return the path of the environment variable
	 * @throws CertificateGenerationException
	 * @throws IOException
	 */
	private static String getMavenHome(String environmentVar)
			throws CertificateGenerationException {
		String home = "";
		Map<String, String> variables = System.getenv();

		for (Map.Entry<String, String> entry : variables.entrySet()) {
			String name = entry.getKey();
			String value = entry.getValue();
			if (name.equalsIgnoreCase(environmentVar)) {
				home = value;
			}
		}
		File homePath = new File(home);
		// handle symlinks
		String filePath;
		try {
			filePath = homePath.getCanonicalPath();
		} catch (IOException e) {
			log.error("Error when getting MAVEN_HOME: " + e.getMessage(), e);
			throw new CertificateGenerationException(
					"Error when getting MAVEN_HOME: " + e.getMessage(), e);
		}
		// maven invoker adds "bin/mvn" when setMavenHome is called. so if it is
		// present in the MAVEN_HOME, it has to be removed
		if (filePath.contains("/bin/mvn")) {
			filePath = filePath.substring(0, filePath.indexOf("/bin/mvn"));
		}
		return filePath;
	}
}
